<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go-swagger toolkit</title>
    <link>http://go-swagger.github.io/</link>
    <description>Recent content on go-swagger toolkit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 go-swagger contributors</copyright>
    <lastBuildDate>Thu, 22 Oct 2015 23:28:09 -0700</lastBuildDate>
    <atom:link href="http://go-swagger.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Validate a swagger spec</title>
      <link>http://go-swagger.github.io/usage/validate/</link>
      <pubDate>Thu, 22 Oct 2015 23:28:09 -0700</pubDate>
      
      <guid>http://go-swagger.github.io/usage/validate/</guid>
      <description>

&lt;p&gt;The toolkit has a command to validate swagger specifications for you.
It includes a full json-schema validator and adds a bunch of extra validations on top of that to ensure the spec
is as valid as possible, so that there are no surprises.&lt;/p&gt;

&lt;h3 id=&#34;usage:c64148e1a0d4f4de12bdfecb139d0588&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;To validate a specification:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger validate [http-url|filepath]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;swagger-2-0-resources:c64148e1a0d4f4de12bdfecb139d0588&#34;&gt;Swagger 2.0 resources&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Specification Documentation: &lt;a href=&#34;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md&#34;&gt;https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JSON Schema: &lt;a href=&#34;https://github.com/swagger-api/swagger-spec/blob/master/schemas/v2.0/schema.json&#34;&gt;https://github.com/swagger-api/swagger-spec/blob/master/schemas/v2.0/schema.json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;sematic-validation:c64148e1a0d4f4de12bdfecb139d0588&#34;&gt;Sematic Validation&lt;/h3&gt;

&lt;p&gt;All the rules the validator tool supports:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;validate against jsonschema&lt;/li&gt;
&lt;li&gt;validate extra rules outlined &lt;a href=&#34;https://github.com/apigee-127/sway/blob/master/docs/versions/2.0.md#semantic-validation&#34;&gt;here&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;definition can&amp;rsquo;t declare a property that&amp;rsquo;s already defined by one of its ancestors (Error)&lt;/li&gt;
&lt;li&gt;definition&amp;rsquo;s ancestor can&amp;rsquo;t be a descendant of the same model (Error)&lt;/li&gt;
&lt;li&gt;each security reference should contain only unique scopes (Warning)&lt;/li&gt;
&lt;li&gt;each security scope in a security definition should be unique (Warning)&lt;/li&gt;
&lt;li&gt;path parameter declarations do not allow empty names &lt;em&gt;(&lt;code&gt;/path/{}&lt;/code&gt; is not valid)&lt;/em&gt; (Error)&lt;/li&gt;
&lt;li&gt;each api path should be non-verbatim (account for path param names) unique per method (Error)&lt;/li&gt;
&lt;li&gt;each path parameter should correspond to a parameter placeholder and vice versa (Error)&lt;/li&gt;
&lt;li&gt;each referencable definition must have references (Warning)&lt;/li&gt;
&lt;li&gt;each definition property listed in the required array must be defined in the properties of the model (Error)&lt;/li&gt;
&lt;li&gt;each parameter should have a unique &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;in&lt;/code&gt; combination (Error)&lt;/li&gt;
&lt;li&gt;each operation must have an unique &lt;code&gt;operationId&lt;/code&gt; (Error)&lt;/li&gt;
&lt;li&gt;each operation should have only 1 parameter of type body (Error)&lt;/li&gt;
&lt;li&gt;each operation cannot have both a body parameter and a formData parameter (Error)&lt;/li&gt;
&lt;li&gt;each reference must point to a valid object (Error)&lt;/li&gt;
&lt;li&gt;every default value that is specified must validate against the schema for that property (Error)&lt;/li&gt;
&lt;li&gt;every example that is specified must validate against the schema for that property (Error)&lt;/li&gt;
&lt;li&gt;items property is required for all schemas/definitions of type &lt;code&gt;array&lt;/code&gt; (Error)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>swagger.json generation</title>
      <link>http://go-swagger.github.io/generate/spec/</link>
      <pubDate>Mon, 09 Nov 2015 18:58:47 -0800</pubDate>
      
      <guid>http://go-swagger.github.io/generate/spec/</guid>
      <description>

&lt;p&gt;The toolkit has a command that will let you generate a swagger spec document from your code.
The command integrates with go doc comments, and makes use of structs when it needs to know of
types.&lt;/p&gt;

&lt;p&gt;Based on the work from &lt;a href=&#34;https://github.com/yvasiyarov/swagger&#34;&gt;https://github.com/yvasiyarov/swagger&lt;/a&gt;&lt;br /&gt;
It uses a similar approach but with expanded annotations and it produces a swagger 2.0 spec.&lt;/p&gt;

&lt;p&gt;The goal of the syntax is to make it look as a natural part of the documentation for the application code.&lt;/p&gt;

&lt;p&gt;The generator is passed a base path (defaults to current) and tries to extract a go package path from that.
Once it has a go package path it will scan the package recursively, skipping the Godeps, files ending in test.go and
directories that start with an underscore, it also skips file system entries that start with a dot.&lt;/p&gt;

&lt;p&gt;Once the parser has encountered a comment that matches on of its known tags, the parser will assume that the rest of
the comment block is for swagger.&lt;/p&gt;

&lt;h3 id=&#34;usage:958e7270f96f5407d7d980f500805b1b&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;To generate a spec:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate spec -o ./swagger.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You give it a main file and it will parse all the files that are required by that main
package to produce a swagger specification.&lt;/p&gt;

&lt;p&gt;To use you can add a go:generate comment to your main file for example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//go:generate swagger generate spec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The command requires a main package or file and it wants your code to compile. It uses the go tools loader to load an
application and then scan all the packages that are in use by the code base.
This means that for something to be discoverable it needs to be reachable by a codepath triggered through the main
package.&lt;/p&gt;

&lt;h4 id=&#34;parsing-rules:958e7270f96f5407d7d980f500805b1b&#34;&gt;Parsing rules&lt;/h4&gt;

&lt;p&gt;This command relies heavily on the way godoc works! This means you should be very aware of all the things godoc
supports.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/golang.org/x/tools/cmd/godoc&#34;&gt;godoc documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.golang.org/godoc-documenting-go-code&#34;&gt;godoc documenting go code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/go/doc/#ToHTML&#34;&gt;godoc ToHTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Single page which documents all the currently supported godoc rules:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/fluhus/godoc-tricks&#34;&gt;godoc tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When an object has a title and a description field, it will use the go rules to parse those. So the first line of the
comment block will become the title, or a header when rendered as godoc. The rest of the comment block will be treated
as description up to either the end of the comment block, or a line that starts with a known annotation.&lt;/p&gt;

&lt;h4 id=&#34;annotation-syntax:958e7270f96f5407d7d980f500805b1b&#34;&gt;Annotation syntax&lt;/h4&gt;

&lt;p&gt;If you want to exclude something from the spec generation process you can try with the struct tag: &lt;code&gt;json:&amp;quot;-&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There are several annotations that mark a comment block as a participant for the swagger spec.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;meta&#34;&gt;swagger:meta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;route&#34;&gt;swagger:route&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;params&#34;&gt;swagger:params&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;response&#34;&gt;swagger:response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;model&#34;&gt;swagger:model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;allOf&#34;&gt;swagger:allOf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;strfmt&#34;&gt;swagger:strfmt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Generate an API client</title>
      <link>http://go-swagger.github.io/generate/client/</link>
      <pubDate>Fri, 23 Oct 2015 22:11:54 -0700</pubDate>
      
      <guid>http://go-swagger.github.io/generate/client/</guid>
      <description>

&lt;p&gt;The toolkit has a command that will let you generate a client.&lt;/p&gt;

&lt;h2 id=&#34;usage:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;There is an example client in&lt;/p&gt;

&lt;p&gt;To generate a client:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger generate client -f [http-url|filepath] -A [application-name] [--principal [principal-name]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Use a default client, which has an HTTP transport:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {

  // make the request to get all items
  resp, err := apiclient.Default.Operations.All(operations.AllParams{})
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The client runtime allows for a number of &lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#Runtime&#34;&gt;configuration
options&lt;/a&gt; to be set.&lt;br /&gt;
To then use the client, and override the host, with a HTTP transport:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;os&amp;quot;
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {
  // load the swagger spec from URL or local file
  doc, err := spec.Load(&amp;quot;https://raw.githubusercontent.com/go-swagger/go-swagger/master/examples/todo-list/swagger.yml&amp;quot;)
  if err != nil {
    log.Fatal(err)
  }

  // create the transport
  transport := httptransport.New(doc)
  // configure the host
  if os.Getenv(&amp;quot;TODOLIST_HOST&amp;quot;) != &amp;quot;&amp;quot; {
    transport.Host = os.Getenv(&amp;quot;TODOLIST_HOST&amp;quot;)
  }

  // create the API client, with the transport
  client := apiclient.New(transport, strfmt.Default)

  // to override the host for the default client
  // apiclient.Default.SetTransport(transport)

  // make the request to get all items
  resp, err := client.Operations.All(operations.AllParams{})
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;authentication:4bd4f30263398a45e38fc9edfc648efa&#34;&gt;Authentication&lt;/h3&gt;

&lt;p&gt;The client supports 3 authentication schemes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#BasicAuth&#34;&gt;Basic Auth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#APIKeyAuth&#34;&gt;API key auth in header or query&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/go-swagger/go-swagger/httpkit/client#BearerToken&#34;&gt;Bearer token header for oauth2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (
  &amp;quot;os&amp;quot;
  &amp;quot;log&amp;quot;

  &amp;quot;github.com/myproject/client/operations&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/strfmt&amp;quot;
  &amp;quot;github.com/go-swagger/go-swagger/spec&amp;quot;

  apiclient &amp;quot;github.com/myproject/client&amp;quot;
  httptransport &amp;quot;github.com/go-swagger/go-swagger/httpkit/client&amp;quot;
)

func main() {
  // load the swagger spec from URL or local file
  doc, err := spec.Load(&amp;quot;./swagger.yml&amp;quot;)
  if err != nil {
    log.Fatal(err)
  }

  // create the API client
  client := apiclient.New(httptransport.New(doc), strfmt.Default)

  // make the authenticated request to get all items
  bearerTokenAuth := httptransport.BearerToken(os.Getenv(&amp;quot;API_ACCESS_TOKEN&amp;quot;))
  // basicAuth := httptransport.BasicAuth(os.Getenv(&amp;quot;API_USER&amp;quot;), os.Getenv(&amp;quot;API_PASSWORD&amp;quot;))
  // apiKeyQueryAuth := httptransport.APIKeyAuth(&amp;quot;apiKey&amp;quot;, &amp;quot;query&amp;quot;, os.Getenv(&amp;quot;API_KEY&amp;quot;))
  // apiKeyHeaderAuth := httptransport.APIKeyAuth(&amp;quot;X-API-TOKEN&amp;quot;, &amp;quot;header&amp;quot;, os.Getenv(&amp;quot;API_KEY&amp;quot;))
  resp, err := client.Operations.All(operations.AllParams{}, bearerTokenAuth)
  // resp, err := client.Operations.All(operations.AllParams{}, basicAuth)
  // resp, err := client.Operations.All(operations.AllParams{}, apiKeyQueryAuth)
  // resp, err := client.Operations.All(operations.AllParams{}, apiKeyHeaderAuth)
  if err != nil {
    log.Fatal(err)
  }
  fmt.Printf(&amp;quot;%#v\n&amp;quot;, resp.Payload)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>What is go-swagger</title>
      <link>http://go-swagger.github.io/about/</link>
      <pubDate>Wed, 21 Oct 2015 21:54:47 -0700</pubDate>
      
      <guid>http://go-swagger.github.io/about/</guid>
      <description>&lt;p&gt;There are 3 axis along which your API and its documentation tend to evolve. This toolkit aims to support you along all 3
axis and remove the repetitive nature of writing what is essentially boilerplate code for faster iteration times.&lt;/p&gt;

&lt;p&gt;The first one is an artefact of that first meeting where you hash out what your service will do. Hopefully you&amp;rsquo;ve come
up with some document that services as a kind of contract for what the affected people/teams will need to do.
At this stage you want to be able to generate a server, perhaps a client to talk to that server.
It&amp;rsquo;s not inconceivable you want to have your frontend team use mock data for that server and that the backend team
wants to be left in peace while they work on their part of the application.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;design first&lt;/strong&gt; approach for swagger.&lt;/p&gt;

&lt;p&gt;Now we&amp;rsquo;re moving on to the second iteration of the project and at this stage, there might be a design meeting for the
new features, or they might just be refinements of the previous API&amp;rsquo;s. When no changes are required to the contract,
all is great because people can keep doing what they were doing and everybody is happy.
However it might be that there was a change that is required for the frontend, they need a boolean added to some model
because they want to display an-accepted-terms-and-conditions-checkbox.
The backend can decide to add this to the code, provide the necessary annotation and regenerate the swagger
specification document.&lt;/p&gt;

&lt;p&gt;This is the &lt;strong&gt;code first&lt;/strong&gt; approach for swagger.&lt;/p&gt;

&lt;p&gt;This toolkit aims to support both these modes, remove the repetitive nature of writing what is essentially boilerplate
code. In doing so it tries to stay as close as possible to the go stdlib interfaces, it tries to have no opinons
besides the fact that documentation is important. And it tries to integrate well with the rest of the go ecosystem as
well as the swagger ecosystem.&lt;/p&gt;

&lt;p&gt;A series of contrib projects will add higher level optional functionality so that you can use the generated code with
confidence whether your application is your personal blog or is the next AWS.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>swagger:meta</title>
      <link>http://go-swagger.github.io/generate/spec/meta/</link>
      <pubDate>Sat, 14 Nov 2015 19:54:53 -0800</pubDate>
      
      <guid>http://go-swagger.github.io/generate/spec/meta/</guid>
      <description>

&lt;p&gt;The &lt;strong&gt;swagger:meta&lt;/strong&gt; annotation flags a file as source for metadata about the API.
This is typically a doc.go file with your package documentation.&lt;/p&gt;

&lt;p&gt;You can specify a Consumes and Produces key which has a new content type on each line
Schemes is a tag that is required and allows for a comma separated string composed of:
http, https, ws or wss&lt;/p&gt;

&lt;p&gt;Host and BasePath can be specified but those values will be defaults,
they should get substituted when serving the swagger spec.&lt;/p&gt;

&lt;p&gt;The description property uses the rest of the comment block as description for the api when not explictily provided&lt;/p&gt;

&lt;h5 id=&#34;syntax:abb586ff2a6b4a7ae7b1b78324299d4e&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:meta
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:abb586ff2a6b4a7ae7b1b78324299d4e&#34;&gt;Properties:&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Terms Of Service&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;allows for either a url or a free text definition describing the terms of services for the API&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Consumes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of default (global) mime type values, one per line, for the content the API receives&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Produces&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of default (global) mime type values, one per line, for the conten the API sends&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Schemes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of default schemes the API accept (possible values: http, https, ws, wss) https is preferred as default when configured&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Version&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the current version of the API&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Host&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the host from where the spec is served&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Base path&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the default base path for this API&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Contact&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the name of for the person to contact concerning the API eg. John Doe&amp;nbsp;&amp;lt;john@blogs.com&amp;gt;&amp;nbsp;&lt;a href=&#34;http://john.blogs.com&#34;&gt;http://john.blogs.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the name of the license followed by the URL of the license eg. MIT &lt;a href=&#34;http://opensource.org/license/MIT&#34;&gt;http://opensource.org/license/MIT&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:abb586ff2a6b4a7ae7b1b78324299d4e&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Package classification Petstore API.
//
// the purpose of this application is to provide an application
// that is using plain go code to define an API
//
// This should demonstrate all the possible comment annotations
// that are available to turn go code into a fully compliant swagger 2.0 spec
//
// Terms Of Service:
//
// there are no TOS at this moment, use at your own risk we take no responsibility
//
//     Schemes: http, https
//     Host: localhost
//     BasePath: /v2
//     Version: 0.0.1
//     License: MIT http://opensource.org/licenses/MIT
//     Contact: John Doe&amp;lt;john.doe@example.com&amp;gt; http://john.doe.com
//
//     Consumes:
//     - application/json
//     - application/xml
//
//     Produces:
//     - application/json
//     - application/xml
//
//
// swagger:meta
package classification
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:abb586ff2a6b4a7ae7b1b78324299d4e&#34;&gt;Result&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
swagger: &#39;2.0&#39;
consumes:
  - application/json
  - application/xml
produces:
  - application/json
  - application/xml
schemes:
  - http
  - https
info:
  description: &amp;quot;the purpose of this application is to provide an application\nthat is using plain go code to define an API\n\nThis should demonstrate all the possible comment annotations\nthat are available to turn go code into a fully compliant swagger 2.0 spec&amp;quot;
  title: &#39;Petstore API.&#39;
  termsOfService: &#39;there are no TOS at this moment, use at your own risk we take no responsibility&#39;
  contact: {name: &#39;John Doe&#39;, url: &#39;http://john.doe.com&#39;, email: john.doe@example.com}
  license: {name: MIT, url: &#39;http://opensource.org/licenses/MIT&#39;}
  version: 0.0.1
host: localhost
basePath: /v2
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:route</title>
      <link>http://go-swagger.github.io/generate/spec/route/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:39 -0800</pubDate>
      
      <guid>http://go-swagger.github.io/generate/spec/route/</guid>
      <description>

&lt;p&gt;A &lt;strong&gt;swagger:route&lt;/strong&gt; annotation links a path to a method.
This operation gets a unique id, which is used in various places as method name.
One such usage is in method names for client generation for example.&lt;/p&gt;

&lt;p&gt;Because there are many routers available, this tool does not try to parse the paths
you provided to your routing library of choice. So you have to specify your path pattern
yourself in valid swagger syntax.&lt;/p&gt;

&lt;h5 id=&#34;syntax:657749a60c6862d2709238cb94541743&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:route [method] [path pattern] [operation id] [?tag1 tag2 tag3]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:657749a60c6862d2709238cb94541743&#34;&gt;Properties:&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Consumes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of operation specific mime type values, one per line, for the content the API receives&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Produces&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of operation specific mime type values, one per line, for the conten the API sends&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Schemes&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a list of operation specific schemes the API accept (possible values: http, https, ws, wss) https is preferred as default when configured&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a dictionary of key: []string{scopes}&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Responses&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a dictionary of status code to named response&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:657749a60c6862d2709238cb94541743&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ServeAPI serves the API for this record store
func ServeAPI(host, basePath string, schemes []string) error {

	// swagger:route GET /pets listPets pets users
	//
	// Lists pets filtered by some parameters.
	//
	// This will show all available pets by default.
	// You can get the pets that are out of stock
	//
	//     Consumes:
	//     - application/json
	//     - application/x-protobuf
	//
	//     Produces:
	//     - application/json
	//     - application/x-protobuf
	//
	//     Schemes: http, https, ws, wss
	//
	//     Security:
	//       api_key:
	//       oauth: read, write
	//
	//     Responses:
	//       default: genericError
	//       200: someResponse
	//       422: validationError
	mountItem(&amp;quot;GET&amp;quot;, basePath+&amp;quot;/pets&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:657749a60c6862d2709238cb94541743&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
operations:
  &amp;quot;/&amp;quot;:
    get:
      operationId: listPets
      tags:
      - pets
      - users
      consumes:
      - application/json
      - application/x-protobuf
      produces:
      - application/json
      - application/x-protobuf
      schemes:
      - http
      - https
      - ws
      - wss
      security:
        api_key: []
        oauth: 
        - read
        - write
      responses:
        default: 
          $ref: &amp;quot;#/responses/genericError&amp;quot;
        200:
          $ref: &amp;quot;#/responses/someResponse&amp;quot;
        422:
          $ref: &amp;quot;#/responses/validationError&amp;quot;
        
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:params</title>
      <link>http://go-swagger.github.io/generate/spec/params/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:43 -0800</pubDate>
      
      <guid>http://go-swagger.github.io/generate/spec/params/</guid>
      <description>

&lt;p&gt;The &lt;strong&gt;swagger:params&lt;/strong&gt; annotation links a struct to one or more operations. The params in the resulting swagger spec can be composed of several structs.
There are no guarantees given on how property name overlaps are resolved when several structs apply to the same operation.
This tag works very similar to the swagger:model tag except that it produces valid parameter objects instead of schema
objects.&lt;/p&gt;

&lt;p&gt;When this appears anywhere in a comment for a struct, then that struct becomes a schema
in the definitions object of swagger.&lt;/p&gt;

&lt;p&gt;The struct gets analyzed and all the collected models are added to the tree.
The refs are tracked separately so that they can be renamed later on.&lt;/p&gt;

&lt;p&gt;At this moment the parameters require one or more structs to be defined, it&amp;rsquo;s not possible to annotate plain var
entries at this moment.&lt;/p&gt;

&lt;h5 id=&#34;syntax:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:params [operationid1 operationid2]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Properties:&lt;/h5&gt;

&lt;p&gt;The fields of this struct can be decorated with a number of annotations. For the field name it uses the struct field
name, it respects the json struct field tag for customizing the name.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;In&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;where to find the parameter&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Collection Format&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when a slice the formatter for the collection when serialized on the request&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true this value needs to be present in the request&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For slice properties there are also items to be defined. This might be a nested collection, for indicating nesting
level the value is a 0-based index, so items.minLength is the same as items.0.minLength&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// swagger:parameter listBars addBars
type BarSliceParam struct {
	// a BarSlice has bars which are strings
	//
	// min items: 3
	// max items: 10
	// unique: true
	// items.minItems: 4
	// items.maxItems: 9
	// items.items.minItems: 5
	// items.items.maxItems: 8
	// items.items.items.minLength: 3
	// items.items.items.maxLength: 10
	// items.items.items.pattern: \w+
	// collection format: pipe
	// in: query
	BarSlice [][][]string `json:&amp;quot;bar_slice&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:9db9435dae1c8dccdc174235ed54a579&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
operations:
  &amp;quot;/&amp;quot;:
    get:
      operationId: listBars
      parameters:
        - name: bar_slice
          in: query
          maxItems: 10 
          minItems: 3
          unique: true
          collectionFormat: pipe
          type: array
          items:
            type: array
            maxItems: 9
            minItems: 4
            items:
              type: array
              maxItems: 8
              minItems: 5
              items:
                type: string
                minLength: 3
                maxLength: 10
                pattern: &amp;quot;\\w+&amp;quot;
    post:
      operationId: addBars
      parameters:
        - name: bar_slice
          in: query
          maxItems: 10 
          minItems: 3
          unique: true
          collectionFormat: pipe
          type: array
          items:
            type: array
            maxItems: 9
            minItems: 4
            items:
              type: array
              maxItems: 8
              minItems: 5
              items:
                type: string
                minLength: 3
                maxLength: 10
                pattern: &amp;quot;\\w+&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:response</title>
      <link>http://go-swagger.github.io/generate/spec/response/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:52 -0800</pubDate>
      
      <guid>http://go-swagger.github.io/generate/spec/response/</guid>
      <description>

&lt;p&gt;Reads a struct decorated with &lt;strong&gt;swagger:response&lt;/strong&gt; and uses that information to fill up the headers and the schema for a response.
A swagger:route can specify a response name for a status code and then the matching response will be used for that operation in the swagger definition.&lt;/p&gt;

&lt;h5 id=&#34;syntax:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:response [?response name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Properties:&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Collection Format&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when a slice the formatter for the collection when serialized on the request&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For slice properties there are also items to be defined. This might be a nested collection, for indicating nesting
level the value is a 0-based index, so items.minLength is the same as items.0.minLength&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A ValidationError is an error that is used when the required input fails validation.
// swagger:response validationError
type ValidationError struct {
	// The error message
	// in: body
	Body struct {
		// The validation message
		// 
		// Required: true
		Message string
		// An optional field name to which this validation applies
		FieldName string
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:7aaab65c33493a192d50f29765cc4ef3&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
responses:
  validationError:
    description: A validation error is an errot that is used whn the required input fails validation.
    schema:
      type: object
      required: 
      - Message
      properties:
        Message:
          type: string
          description: The validation message
        FieldName:
          type: string
          description: an optional field name to which this validation applies
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:model</title>
      <link>http://go-swagger.github.io/generate/spec/model/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:32 -0800</pubDate>
      
      <guid>http://go-swagger.github.io/generate/spec/model/</guid>
      <description>

&lt;p&gt;A &lt;strong&gt;swagger:model&lt;/strong&gt; annotation optionally gets a model name as extra data on the line.
when this appears anywhere in a comment for a struct, then that struct becomes a schema
in the definitions object of swagger.&lt;/p&gt;

&lt;p&gt;The struct gets analyzed and all the collected models are added to the tree.
The refs are tracked separately so that they can be renamed later on.&lt;/p&gt;

&lt;p&gt;Definitions only appear in the generated spec when they are actually used somewhere in the application (eg. on a params or response struct)&lt;/p&gt;

&lt;h5 id=&#34;syntax:48ee0a3512ab0b5afa0cb3ef9950802a&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:model [?model name]
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;properties:48ee0a3512ab0b5afa0cb3ef9950802a&#34;&gt;Properties:&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true this value needs to be set on the schema&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Read Only&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true this value will be marked as read-only and is not required in request bodies&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;For slice properties there are also items to be defined. This might be a nested collection, for indicating nesting
level the value is a 0-based index, so items.minLength is the same as items.0.minLength&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Annotation&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the maximum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies the minimum a number or integer value can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Multiple of&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;specifies a value a number or integer value must be a multiple of&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum length&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum length for a string value at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Pattern&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;a regular expression a string value needs to match at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Minimum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the minimum number of items a slice needs to have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Maximum items&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;the maximum number of items a slice can have at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Items.&lt;em&gt;n&lt;/em&gt;.Unique&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;when set to true the slice can only contain unique items at the level &lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h5 id=&#34;example:48ee0a3512ab0b5afa0cb3ef9950802a&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// User represents the user for this application
//
// A user is the security principal for this application.
// It&#39;s also used as one of main axis for reporting.
//
// A user can have friends with whom they can share what they like.
//
// swagger:model
type User struct {
	// the id for this user
	//
	// required: true
	// min: 1
	ID int64 `json:&amp;quot;id&amp;quot;`

	// the name for this user
	// required: true
	// min length: 3
	Name string `json:&amp;quot;name&amp;quot;`

	// the email address for this user
	//
	// required: true
	Email strfmt.Email `json:&amp;quot;login&amp;quot;`

	// the friends for this user
	Friends []User `json:&amp;quot;friends&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:48ee0a3512ab0b5afa0cb3ef9950802a&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
definitions:
  User:
    type: object
    title: User represents the user for this application
    description: &amp;quot;A user is the security principal for this application.\nIt&#39;s also used as one of the main axis for reporting.\n\nA user can have friends with whom they can share what they like.&amp;quot;
    required:
      - id
      - name
      - login
    properties:
      id:
        description: the id for this user
        type: integer
        format: int64
        minimum: 1
      name:
        description: the name for this user
        type: string
        minLength: 3
      login:
        description: the email address for this user
        type: string
        format: email
        x-go-name: Email
      friends:
        description: the friends for this user
        type: array
        items:
          $ref: &amp;quot;#/definitions/User&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:allOf</title>
      <link>http://go-swagger.github.io/generate/spec/allOf/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:58 -0800</pubDate>
      
      <guid>http://go-swagger.github.io/generate/spec/allOf/</guid>
      <description>

&lt;p&gt;Marks an embedded type as  a member for allOf&lt;/p&gt;

&lt;h5 id=&#34;syntax:9e114a42ed516fdef13f2ebb84a2eb20&#34;&gt;Syntax:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;swagger:allOf
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;example:9e114a42ed516fdef13f2ebb84a2eb20&#34;&gt;Example:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A SimpleOne is a model with a few simple fields
type SimpleOne struct {
	ID   int64  `json:&amp;quot;id&amp;quot;`
	Name string `json:&amp;quot;name&amp;quot;`
	Age  int32  `json:&amp;quot;age&amp;quot;`
}

// A Something struct is used by other structs
type Something struct {
	DID int64  `json:&amp;quot;did&amp;quot;`
	Cat string `json:&amp;quot;cat&amp;quot;`
}

// Notable is a model in a transitive package.
// it&#39;s used for embedding in another model
//
// swagger:model withNotes
type Notable struct {
	Notes string `json:&amp;quot;notes&amp;quot;`

	Extra string `json:&amp;quot;extra&amp;quot;`
}

// An AllOfModel is composed out of embedded structs but it should build
// an allOf property
type AllOfModel struct {
	// swagger:allOf
	SimpleOne
	// swagger:allOf
	mods.Notable

	Something // not annotated with anything, so should be included

	CreatedAt strfmt.DateTime `json:&amp;quot;createdAt&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;result:9e114a42ed516fdef13f2ebb84a2eb20&#34;&gt;Result:&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
definitions:
  SimpleOne:
    title: A SimpleOne is a model with a few simple fields
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      age:
        type: integer
        format: int32
  Notable:
    title: &amp;quot;Notable is a model in a transitive package.\nit&#39;s used for embedding in another model&amp;quot;
    type: object
    properties:
      notes:
        type: string
      extra:
        type: string
  AllOfModel:
    title: &amp;quot;An AllOfModel is composed out of embedded structs but it should build\nan allOf property&amp;quot;
    allOf: 
      - $ref: &amp;quot;#/definitions/SimpleOne&amp;quot;
      - $ref: &amp;quot;#/definitions/Notable&amp;quot;
      - title: A Something struct is used by other structs
        type: object
        properties:
          did:
            type: integer
            format: int64
          cat:
            type: string
      - type: object
        properties:
          createdAt:
            type: string
            format: date-time
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>swagger:strfmt</title>
      <link>http://go-swagger.github.io/generate/spec/strfmt/</link>
      <pubDate>Sat, 14 Nov 2015 20:10:24 -0800</pubDate>
      
      <guid>http://go-swagger.github.io/generate/spec/strfmt/</guid>
      <description>&lt;p&gt;A &lt;strong&gt;swagger:strfmt&lt;/strong&gt; annotation names a type as a string formatter. The name is mandatory and that is
what will be used as format name for this particular string format.
String formats should only be used for very well known formats.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;swagger:strfmt [name]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>